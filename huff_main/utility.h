#ifndef UTILITY_AHRT
#define UTILITY_AHRT

FILE* U_Read_From_Stream() {
    char *string = (char*) malloc(MAX_STRING_SIZE * sizeof(char));
    printf("Source file name: ");
    scanf(" %[^\n]s", string);
    FILE *loaded_file = fopen(string, "rb");
    free(string);
    return loaded_file;
}

void U_HASHING_Pre_Order_Walk(TREE_NODE *tree_node, LIST *list, HASH *cmpressed_repr) {
    if(tree_node == NULL)
        return;
    if(tree_node->left == NULL && tree_node->right == NULL) {
        LIST_NODE *current = list->head;
        while(current != NULL) {
            if(cmpressed_repr->table[HUFF_DATA_Get_Character(tree_node->data)] == NULL)
                cmpressed_repr->table[HUFF_DATA_Get_Character(tree_node->data)] = LIST_Create();
            LIST_Insert_Tail(cmpressed_repr->table[HUFF_DATA_Get_Character(tree_node->data)], current->data);
            current = current->next;
        }
    }
    LIST_Insert_Tail(list, '0');
    U_HASHING_Pre_Order_Walk(tree_node->left, list, cmpressed_repr);
    LIST_Remove_Tail(list);
    
    LIST_Insert_Tail(list, '1');
    U_HASHING_Pre_Order_Walk(tree_node->right, list, cmpressed_repr);
    LIST_Remove_Tail(list);
    return;
}

void U_PRINTING_Pre_Order_Walk(TREE_NODE *tree_node, FILE *compressed_file) {
    if(tree_node == NULL)
        return;
    if(tree_node->left == NULL && tree_node->right == NULL) {
        if(HUFF_DATA_Get_Character(tree_node->data) == '*' ||
            HUFF_DATA_Get_Character(tree_node->data) == '\\') {
            fputc('\\', compressed_file);
        }
    }
    fputc(HUFF_DATA_Get_Character(tree_node->data), compressed_file);
    U_PRINTING_Pre_Order_Walk(tree_node->left, compressed_file);
    U_PRINTING_Pre_Order_Walk(tree_node->right, compressed_file);
    return;
}

#endif
